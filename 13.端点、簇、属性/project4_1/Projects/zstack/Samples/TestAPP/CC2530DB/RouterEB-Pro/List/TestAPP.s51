///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        27/Oct/2023  13:16:50 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\Source\TestAPP.c                                /
//    Command line       =  -f C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨Ð /
//                          Å¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\Tes /
//                          tAPP\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.c /
//                          fg (-DCPU32MHZ -DROOT=__near_func                 /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f C:\Users\yuan_hao\Desktop\´óÈýÉÏ /
//                          ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zsta /
//                          ck\Samples\TestAPP\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg (-DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\yuan_hao\Desktop\ /
//                          ´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Project /
//                          s\zstack\Samples\TestAPP\Source\TestAPP.c -D      /
//                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC   /
//                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC         /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\RouterEB-Pro\List\ -lA                 /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\RouterEB-Pro\List\ --diag_suppress     /
//                          Pe001,Pa010 -o C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î /
//                          ³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack /
//                          \Samples\TestAPP\CC2530DB\RouterEB-Pro\Obj\ -e    /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨Ð /
//                          Å¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\Tes /
//                          tAPP\CC2530DB\ -I C:\Users\yuan_hao\Desktop\´óÈýÉ /
//                          Ï¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zst /
//                          ack\Samples\TestAPP\CC2530DB\..\SOURCE\ -I        /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ /
//                           -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ /
//                          ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\Te /
//                          stAPP\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG /
//                          ET\CC2530EB\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿ /
//                          Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstac /
//                          k\Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\OSAL\MCU\CCSOC\ -I C:\Users\yuan_hao\Desktop\ /
//                          ´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Project /
//                          s\zstack\Samples\TestAPP\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\OSAL\INCLUDE\ -I                       /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\    /
//                          -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨Ð /
//                          Å¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\Tes /
//                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK /
//                          \ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ /
//                          ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\T /
//                          estAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍ /
//                          øÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples /
//                          \TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \SAPI\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\Îï /
//                          ÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samp /
//                          les\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ST /
//                          ACK\SYS\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ /
//                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Sa /
//                          mples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\ZDO\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³ /
//                          Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\ /
//                          Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\F8W\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î /
//                          ³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack /
//                          \Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONEN /
//                          TS\ZMAC\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ /
//                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Sa /
//                          mples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          SERVICES\SADDR\ -I C:\Users\yuan_hao\Desktop\´óÈý /
//                          ÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zs /
//                          tack\Samples\TestAPP\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SDATA\ -I                         /
//                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ /
//                           -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ /
//                          ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\Te /
//                          stAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH /
//                          _LEVEL\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\Î /
//                          ïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Sam /
//                          ples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\M /
//                          AC\LOW_LEVEL\srf04\ -I C:\Users\yuan_hao\Desktop\ /
//                          ´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Project /
//                          s\zstack\Samples\TestAPP\CC2530DB\..\..\..\..\..\ /
//                          COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz  /
//    List file          =  C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼ /
//                          Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAP /
//                          P\CC2530DB\RouterEB-Pro\List\TestAPP.s51          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME TestAPP

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??TestAPP_HandleKeys?relay
        FUNCTION ??TestAPP_HandleKeys?relay,0203H
        PUBLIC ??TestAPP_Init?relay
        FUNCTION ??TestAPP_Init?relay,0203H
        PUBLIC ??TestAPP_MessageMSGCB?relay
        FUNCTION ??TestAPP_MessageMSGCB?relay,0203H
        PUBLIC ??TestAPP_ProcessEvent?relay
        FUNCTION ??TestAPP_ProcessEvent?relay,0203H
        PUBLIC ??TestAPP_ProcessZDOMsgs?relay
        FUNCTION ??TestAPP_ProcessZDOMsgs?relay,0203H
        PUBLIC ??TestAPP_SendTheMessage?relay
        FUNCTION ??TestAPP_SendTheMessage?relay,0203H
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC TestAPP_ClusterList
        PUBLIC TestAPP_DstAddr
        PUBLIC TestAPP_HandleKeys
        FUNCTION TestAPP_HandleKeys,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TestAPP_Init
        FUNCTION TestAPP_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC TestAPP_MessageMSGCB
        FUNCTION TestAPP_MessageMSGCB,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC TestAPP_NwkState
        PUBLIC TestAPP_ProcessEvent
        FUNCTION TestAPP_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC TestAPP_ProcessZDOMsgs
        FUNCTION TestAPP_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC TestAPP_SendTheMessage
        FUNCTION TestAPP_SendTheMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC TestAPP_SimpleDesc
        PUBLIC TestAPP_TaskID
        PUBLIC TestAPP_TransID
        PUBLIC TestAPP_epDesc
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
LS164_BYTE          SYMBOL "LS164_BYTE"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_strlen         SYMBOL "osal_strlen"
AF_DataRequest      SYMBOL "AF_DataRequest"
HalLedSet           SYMBOL "HalLedSet"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??LS164_BYTE?relay  SYMBOL "?relay", LS164_BYTE
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_strlen?relay SYMBOL "?relay", osal_strlen
TestAPP_HandleKeys  SYMBOL "TestAPP_HandleKeys"
??TestAPP_HandleKeys?relay SYMBOL "?relay", TestAPP_HandleKeys
TestAPP_Init        SYMBOL "TestAPP_Init"
??TestAPP_Init?relay SYMBOL "?relay", TestAPP_Init
TestAPP_MessageMSGCB SYMBOL "TestAPP_MessageMSGCB"
??TestAPP_MessageMSGCB?relay SYMBOL "?relay", TestAPP_MessageMSGCB
TestAPP_ProcessEvent SYMBOL "TestAPP_ProcessEvent"
??TestAPP_ProcessEvent?relay SYMBOL "?relay", TestAPP_ProcessEvent
TestAPP_ProcessZDOMsgs SYMBOL "TestAPP_ProcessZDOMsgs"
??TestAPP_ProcessZDOMsgs?relay SYMBOL "?relay", TestAPP_ProcessZDOMsgs
TestAPP_SendTheMessage SYMBOL "TestAPP_SendTheMessage"
??TestAPP_SendTheMessage?relay SYMBOL "?relay", TestAPP_SendTheMessage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LS164_BYTE
        FUNCTION LS164_BYTE,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??LS164_BYTE?relay
        FUNCTION ??LS164_BYTE?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project3_1\Projects\zstack\Samples\TestAPP\Source\TestAPP.c
//    1 /**************************************************************************************************
//    2   Filename:       TestAPP.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 15 seconds.  The application will also
//   46   receive "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 
//   69 #include "TestAPP.h"
//   70 #include "DebugTrace.h"
//   71 
//   72 #if !defined( WIN32 )
//   73   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   74 #endif
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 
//   82 #include"74LS164_8LED.h"
//   83 /*********************************************************************
//   84  * MACROS
//   85  */
//   86 
//   87 /*********************************************************************
//   88  * CONSTANTS
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * TYPEDEFS
//   93  */
//   94 
//   95 /*********************************************************************
//   96  * GLOBAL VARIABLES
//   97  */
//   98 
//   99 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  100 const cId_t TestAPP_ClusterList[TestAPP_MAX_CLUSTERS] =
TestAPP_ClusterList:
        DW 1
//  101 {
//  102   TestAPP_CLUSTERID
//  103 };
//  104 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  105 const SimpleDescriptionFormat_t TestAPP_SimpleDesc =
TestAPP_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW TestAPP_ClusterList
        DATA8
        DB 1
        DATA16
        DW TestAPP_ClusterList
//  106 {
//  107   TestAPP_ENDPOINT,              //  int Endpoint;
//  108   TestAPP_PROFID,                //  uint16 AppProfId[2];
//  109   TestAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  110   TestAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  111   TestAPP_FLAGS,                 //  int   AppFlags:4;
//  112   TestAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  113   (cId_t *)TestAPP_ClusterList,  //  byte *pAppInClusterList;
//  114   TestAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  115   (cId_t *)TestAPP_ClusterList   //  byte *pAppInClusterList;
//  116 };
//  117 
//  118 // This is the Endpoint/Interface description.  It is defined here, but
//  119 // filled-in in TestAPP_Init().  Another way to go would be to fill
//  120 // in the structure here and make it a "const" (in code space).  The
//  121 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 endPointDesc_t TestAPP_epDesc;
TestAPP_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 /*********************************************************************
//  125  * EXTERNAL VARIABLES
//  126  */
//  127 
//  128 /*********************************************************************
//  129  * EXTERNAL FUNCTIONS
//  130  */
//  131 
//  132 /*********************************************************************
//  133  * LOCAL VARIABLES
//  134  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 byte TestAPP_TaskID;   // Task ID for internal task/event processing
TestAPP_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136                           // This variable will be received when
//  137                           // TestAPP_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 devStates_t TestAPP_NwkState;
TestAPP_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 byte TestAPP_TransID;  // This is the unique message ID (counter)
TestAPP_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t TestAPP_DstAddr;
TestAPP_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 /*********************************************************************
//  146  * LOCAL FUNCTIONS
//  147  */
//  148 void TestAPP_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  149 void TestAPP_HandleKeys( byte shift, byte keys );
//  150 void TestAPP_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  151 void TestAPP_SendTheMessage( void );
//  152 
//  153 /*********************************************************************
//  154  * NETWORK LAYER CALLBACKS
//  155  */
//  156 
//  157 /*********************************************************************
//  158  * PUBLIC FUNCTIONS
//  159  */
//  160 
//  161 /*********************************************************************
//  162  * @fn      TestAPP_Init
//  163  *
//  164  * @brief   Initialization function for the Generic App Task.
//  165  *          This is called during initialization and should contain
//  166  *          any application specific initialization (ie. hardware
//  167  *          initialization/setup, table initialization, power up
//  168  *          notificaiton ... ).
//  169  *
//  170  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  171  *                    used to send messages and set timers.
//  172  *
//  173  * @return  none
//  174  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void TestAPP_Init( byte task_id )
TestAPP_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function TestAPP_Init
        CODE
//  176 {
        FUNCALL TestAPP_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  177   TestAPP_TaskID = task_id;
        MOV     DPTR,#TestAPP_TaskID
        MOVX    @DPTR,A
//  178   TestAPP_NwkState = DEV_INIT;
        MOV     DPTR,#TestAPP_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  179   TestAPP_TransID = 0;
        MOV     DPTR,#TestAPP_TransID
        CLR     A
        MOVX    @DPTR,A
//  180 
//  181   // Device hardware initialization can be added here or in main() (Zmain.c).
//  182   // If the hardware is application specific - add it here.
//  183   // If the hardware is other parts of the device add it in main().
//  184 
//  185   TestAPP_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#TestAPP_DstAddr + 8
        MOVX    @DPTR,A
//  186   TestAPP_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  187   TestAPP_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#TestAPP_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  188 
//  189   // Fill out the endpoint description.
//  190   TestAPP_epDesc.endPoint = TestAPP_ENDPOINT;
        MOV     DPTR,#TestAPP_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  191   TestAPP_epDesc.task_id = &TestAPP_TaskID;
        INC     DPTR
        MOV     A,#TestAPP_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TestAPP_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  192   TestAPP_epDesc.simpleDesc
//  193             = (SimpleDescriptionFormat_t *)&TestAPP_SimpleDesc;
        INC     DPTR
        MOV     A,#TestAPP_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(TestAPP_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  194   TestAPP_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  195 
//  196   // Register the endpoint description with the AF
//  197   afRegister( &TestAPP_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#TestAPP_epDesc & 0xff
        MOV     R3,#(TestAPP_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  198 
//  199   // Register for all key events - This app will handle all key events
//  200   RegisterForKeys( TestAPP_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#TestAPP_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  201 
//  202   // Update the display
//  203 #if defined ( LCD_SUPPORTED )
//  204     HalLcdWriteString( "TestAPP", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "TestAPP">` & 0xff
        MOV     R3,#(`?<Constant "TestAPP">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  205 #endif
//  206     
//  207   ZDO_RegisterForZDOMsg( TestAPP_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#TestAPP_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  208   ZDO_RegisterForZDOMsg( TestAPP_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#TestAPP_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        CFI EndBlock cfiBlock0
//  209 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  210 
//  211 /*********************************************************************
//  212  * @fn      TestAPP_ProcessEvent
//  213  *
//  214  * @brief   Generic Application Task event processor.  This function
//  215  *          is called to process all events for the task.  Events
//  216  *          include timers, messages and any other user defined events.
//  217  *
//  218  * @param   task_id  - The OSAL assigned task ID.
//  219  * @param   events - events to process.  This is a bit map and can
//  220  *                   contain more than one event.
//  221  *
//  222  * @return  none
//  223  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  224 UINT16 TestAPP_ProcessEvent( byte task_id, UINT16 events )
TestAPP_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function TestAPP_ProcessEvent
        CODE
//  225 {
        FUNCALL TestAPP_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, TestAPP_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, TestAPP_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessEvent, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  226   afIncomingMSGPacket_t *MSGpkt;
//  227   afDataConfirm_t *afDataConfirm;
//  228 
//  229   // Data Confirmation message fields
//  230   byte sentEP;
//  231   ZStatus_t sentStatus;
//  232   byte sentTransID;       // This should match the value sent
//  233   (void)task_id;  // Intentionally unreferenced parameter
//  234 
//  235   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??TestAPP_ProcessEvent_0 & 0xFFFF
//  236   {
//  237     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TestAPP_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??TestAPP_ProcessEvent_1
//  238     while ( MSGpkt )
//  239     {
//  240       switch ( MSGpkt->hdr.event )
//  241       {
//  242         case ZDO_CB_MSG:
//  243           TestAPP_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  244           break;
//  245           
//  246         case KEY_CHANGE:
//  247           TestAPP_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  248           break;
//  249 
//  250         case AF_DATA_CONFIRM_CMD:
//  251           // This message is received as a confirmation of a data packet sent.
//  252           // The status is of ZStatus_t type [defined in ZComDef.h]
//  253           // The message fields are defined in AF.h
//  254           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  255           sentEP = afDataConfirm->endpoint;
//  256           sentStatus = afDataConfirm->hdr.status;
//  257           sentTransID = afDataConfirm->transID;
//  258           (void)sentEP;
//  259           (void)sentTransID;
//  260 
//  261           // Action taken when confirmation is received.
//  262           if ( sentStatus != ZSuccess )
//  263           {
//  264             // The data wasn't delivered -- Do something
//  265           }
//  266           break;
//  267 
//  268         case AF_INCOMING_MSG_CMD:
//  269           TestAPP_MessageMSGCB( MSGpkt );
//  270           break;
//  271 
//  272         case ZDO_STATE_CHANGE:
//  273           TestAPP_NwkState = (devStates_t)(MSGpkt->hdr.status);
??TestAPP_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TestAPP_NwkState
        MOVX    @DPTR,A
//  274           
//  275           if (TestAPP_NwkState == DEV_ZB_COORD){
        XRL     A,#0x9
        JNZ     ??TestAPP_ProcessEvent_3
//  276               //Ð­µ÷Æ÷
//  277               LS164_BYTE(11);
        ; Setup parameters for call to function LS164_BYTE
        MOV     R1,#0xb
        LCALL   ??LS164_BYTE?relay
//  278               //osal_set_event(TestAPP_TaskID,TestAPP_SEND_MSG_EVT);
//  279               //osal_start_timerEx(TestAPP_TaskID,TestAPP_SEND_MSG_EVT,2000);
//  280               //osal_start_timerEx(TestAPP_TaskID,TestAPP_EVT,3000);
//  281               
//  282               // ¶¨ÒåÒ»¸öÃûÎªkeyChange_tµÄ½á¹¹ÌåÖ¸ÕëmsgPtr
//  283               keyChange_t *msgPtr;
//  284               
//  285               //¶¨Òå°´¼üÏìÓ¦ÏûÏ¢
//  286               msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  287               
//  288               if ( msgPtr ){
        MOV     A,R2
        ORL     A,R3
        JZ      ??TestAPP_ProcessEvent_3
//  289                   // ½«ÏûÏ¢Í·²¿µÄÊÂ¼þÉèÖÃÎªKEY_CHANGE
//  290                   msgPtr->hdr.event = KEY_CHANGE;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x40
        MOVX    @DPTR,A
//  291                   // ½«¼üÖµÉèÖÃÎª3
//  292                   msgPtr->keys=3;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  293                   
//  294                   //½«·¢ËÍ¸øTestAPP_TaskIDÈÎÎñµÄÏûÏ¢Ñ¹ÈëÏûÏ¢¶ÓÁÐ£¬²¢ÏìÓ¦ÏµÍ³ÊÂ¼þosal_set_event(TestAPP_TaskID,SYS_EVENT_MSG);
//  295                   osal_msg_send( TestAPP_TaskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#TestAPP_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  296               }
//  297 
//  298           }
//  299 
//  300           if (TestAPP_NwkState == DEV_ROUTER){
??TestAPP_ProcessEvent_3:
        MOV     DPTR,#TestAPP_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??TestAPP_ProcessEvent_4
//  301               //Â·ÓÉÆ÷
//  302               LS164_BYTE(12);
        ; Setup parameters for call to function LS164_BYTE
        MOV     R1,#0xc
        LCALL   ??LS164_BYTE?relay
//  303           }
//  304               
//  305           if (TestAPP_NwkState == DEV_END_DEVICE){
??TestAPP_ProcessEvent_4:
        MOV     DPTR,#TestAPP_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??TestAPP_ProcessEvent_5
//  306               //ÖÕ¶Ë
//  307               LS164_BYTE(13); 
        ; Setup parameters for call to function LS164_BYTE
        MOV     R1,#0xd
??TestAPP_ProcessEvent_6:
        LCALL   ??LS164_BYTE?relay
//  308           }   
//  309           break;
//  310         default:
//  311           break;
//  312       }
//  313 
//  314       // Release the memory
//  315       osal_msg_deallocate( (uint8 *)MSGpkt );
??TestAPP_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  316 
//  317       // Next
//  318       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TestAPP_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??TestAPP_ProcessEvent_1:
        MOV     DPTR,#TestAPP_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??TestAPP_ProcessEvent_7
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??TestAPP_ProcessEvent_8
        ADD     A,#0x5a
        JZ      ??TestAPP_ProcessEvent_9
        ADD     A,#-0x11
        JZ      ??TestAPP_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??TestAPP_ProcessEvent_5
        ; Setup parameters for call to function TestAPP_ProcessZDOMsgs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??TestAPP_ProcessZDOMsgs?relay
        SJMP    ??TestAPP_ProcessEvent_5
??TestAPP_ProcessEvent_9:
        ; Setup parameters for call to function LS164_BYTE
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??TestAPP_ProcessEvent_6
??TestAPP_ProcessEvent_8:
        ; Setup parameters for call to function TestAPP_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??TestAPP_MessageMSGCB?relay
        SJMP    ??TestAPP_ProcessEvent_5
//  319     }
//  320 
//  321     // return unprocessed events
//  322     return (events ^ SYS_EVENT_MSG);
??TestAPP_ProcessEvent_7:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??TestAPP_ProcessEvent_10 & 0xFFFF
//  323   }
//  324 
//  325   // Send a message out - This event is generated by a timer
//  326   //  (setup in TestAPP_Init()).
//  327   if ( events & TestAPP_SEND_MSG_EVT ){
??TestAPP_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??TestAPP_ProcessEvent_11
//  328       
//  329     P0DIR |= 0X02;
        ORL     0xfd,#0x2
//  330     P0_1 = 0;
        CLR     0x80.1
//  331       
//  332     // return unprocessed events
//  333     return (events ^ TestAPP_SEND_MSG_EVT);
        XRL     A,#0x1
        MOV     R2,A
        LJMP    ??TestAPP_ProcessEvent_10 & 0xFFFF
//  334   }
//  335   
//  336   
//  337   if ( events & TestAPP_EVT ){
??TestAPP_ProcessEvent_11:
        ANL     A,#0x2
        JNZ     $+5
        LJMP    ??TestAPP_ProcessEvent_12 & 0xFFFF
//  338      
//  339      //P0SEL &=0XEF;//1110 1111 
//  340      //P0DIR |= 0X10;
//  341      //P0_4 ^= 1;
//  342      
//  343      if(0==P1_1){/*°´Å¥3°´ÏÂ*/
        MOV     C,0x90.1
        JNC     $+5
        LJMP    ??TestAPP_ProcessEvent_13 & 0xFFFF
//  344         
//  345         char theMessageData[]="Hello ZigBee \r\n";
        MOV     DPTR,#`?<Constant "Hello ZigBee \\r\\n">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Hello ZigBee \\r\\n">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  346         //char theMessageData[] = {8};
//  347         //LS164_BYTE(3);
//  348 
//  349         TestAPP_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TestAPP_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  350         TestAPP_DstAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#TestAPP_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  351         TestAPP_DstAddr.endPoint = TestAPP_ENDPOINT;
        MOV     DPTR,#TestAPP_DstAddr + 9
        MOV     A,#0xa
        MOVX    @DPTR,A
//  352          
//  353         AF_DataRequest(&TestAPP_DstAddr, 
//  354                        &TestAPP_epDesc,
//  355                        TestAPP_CLUSTERID,
//  356                        (byte)osal_strlen( theMessageData ) + 1,
//  357                        (byte *)&theMessageData,
//  358                        &TestAPP_TransID,
//  359                        AF_DISCV_ROUTE, 
//  360                        AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 2,#TestAPP_TransID & 0xff
        MOV     ?V0 + 3,#(TestAPP_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x20
        MOV     R4,#TestAPP_epDesc & 0xff
        MOV     R5,#(TestAPP_epDesc >> 8) & 0xff
        MOV     R2,#TestAPP_DstAddr & 0xff
        MOV     R3,#(TestAPP_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  361         
//  362         P1SEL &=0Xfe;// 1111 1110
        ANL     0xf4,#0xfe
//  363         P1DIR |=0X01;
        ORL     0xfe,#0x1
//  364         P1_0 ^=1;    
        XRL     0x90,#0x1
//  365      }
//  366      if(0==P2_0){/*°´Å¥4°´ÏÂ*/
??TestAPP_ProcessEvent_13:
        MOV     C,0xa0.0
        JC      ??TestAPP_ProcessEvent_14
//  367         LS164_BYTE(4);
        ; Setup parameters for call to function LS164_BYTE
        MOV     R1,#0x4
        LCALL   ??LS164_BYTE?relay
//  368      }
//  369      if(0==P0_5){/*°´Å¥5°´ÏÂ*/
??TestAPP_ProcessEvent_14:
        MOV     C,0x80.5
        JC      ??TestAPP_ProcessEvent_15
//  370         LS164_BYTE(5);
        ; Setup parameters for call to function LS164_BYTE
        MOV     R1,#0x5
        LCALL   ??LS164_BYTE?relay
//  371      }
//  372       
//  373      return (events ^ TestAPP_EVT);
??TestAPP_ProcessEvent_15:
        MOV     A,?V0 + 0
        XRL     A,#0x2
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??TestAPP_ProcessEvent_10
//  374   }
//  375 
//  376   // Discard unknown events
//  377   return 0;
??TestAPP_ProcessEvent_12:
        MOV     R2,#0x0
        MOV     R3,#0x0
??TestAPP_ProcessEvent_10:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE P0DIR
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P2
//  378 }
//  379 
//  380 /*********************************************************************
//  381  * Event Generation Functions
//  382  */
//  383 
//  384 /*********************************************************************
//  385  * @fn      TestAPP_ProcessZDOMsgs()
//  386  *
//  387  * @brief   Process response messages
//  388  *
//  389  * @param   none
//  390  *
//  391  * @return  none
//  392  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  393 void TestAPP_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
TestAPP_ProcessZDOMsgs:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function TestAPP_ProcessZDOMsgs
        CODE
//  394 {
        FUNCALL TestAPP_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  395   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for TestAPP_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TestAPP_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TestAPP_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??TestAPP_ProcessZDOMsgs_2
        CODE
//  396   {
//  397     case End_Device_Bind_rsp:
//  398       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??TestAPP_ProcessZDOMsgs_1:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??TestAPP_ProcessZDOMsgs_3
//  399       {
//  400         // Light LED
//  401         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??TestAPP_ProcessZDOMsgs_4:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        SJMP    ??TestAPP_ProcessZDOMsgs_2
//  402       }
//  403 #if defined(BLINK_LEDS)
//  404       else
//  405       {
//  406         // Flash LED to show failure
//  407         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??TestAPP_ProcessZDOMsgs_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??TestAPP_ProcessZDOMsgs_4
//  408       }
//  409 #endif
//  410       break;
//  411 
//  412     case Match_Desc_rsp:
//  413       {
//  414         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??TestAPP_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  415         if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??TestAPP_ProcessZDOMsgs_2
//  416         {
//  417           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??TestAPP_ProcessZDOMsgs_5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??TestAPP_ProcessZDOMsgs_5
//  418           {
//  419             TestAPP_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#TestAPP_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  420             TestAPP_DstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#TestAPP_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  421             // Take the first endpoint, Can be changed to search through endpoints
//  422             TestAPP_DstAddr.endPoint = pRsp->epList[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#TestAPP_DstAddr + 9
        MOVX    @DPTR,A
//  423 
//  424             // Light LED
//  425             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  426           }
//  427           osal_mem_free( pRsp );
??TestAPP_ProcessZDOMsgs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        CFI EndBlock cfiBlock3
//  428         }
//  429       }
//  430       break;
//  431   }
//  432 }
??TestAPP_ProcessZDOMsgs_2:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  433 
//  434 /*********************************************************************
//  435  * @fn      TestAPP_HandleKeys
//  436  *
//  437  * @brief   Handles all key events for this device.
//  438  *
//  439  * @param   shift - true if in shift/alt.
//  440  * @param   keys - bit field for key events. Valid entries:
//  441  *                 HAL_KEY_SW_4
//  442  *                 HAL_KEY_SW_3
//  443  *                 HAL_KEY_SW_2
//  444  *                 HAL_KEY_SW_1
//  445  *
//  446  * @return  none
//  447  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  448 void TestAPP_HandleKeys( byte shift, byte keys )
TestAPP_HandleKeys:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function TestAPP_HandleKeys
        CODE
//  449 {
        FUNCALL TestAPP_HandleKeys, LS164_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
//  450    LS164_BYTE(keys);
        ; Setup parameters for call to function LS164_BYTE
        MOV     R1,A
        LCALL   ??LS164_BYTE?relay
//  451 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock5
//  452 
//  453 /*********************************************************************
//  454  * LOCAL FUNCTIONS
//  455  */
//  456 
//  457 /*********************************************************************
//  458  * @fn      TestAPP_MessageMSGCB
//  459  *
//  460  * @brief   Data message processor callback.  This function processes
//  461  *          any incoming data - probably from other devices.  So, based
//  462  *          on cluster ID, perform the intended action.
//  463  *
//  464  * @param   none
//  465  *
//  466  * @return  none
//  467  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  468 void TestAPP_MessageMSGCB( afIncomingMSGPacket_t *pkt )
TestAPP_MessageMSGCB:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function TestAPP_MessageMSGCB
        CODE
//  469 {
        FUNCALL TestAPP_MessageMSGCB, HalLcdWriteScreen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  470   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??TestAPP_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??TestAPP_MessageMSGCB_0:
        JNZ     ??TestAPP_MessageMSGCB_1
//  471   {
//  472     case TestAPP_CLUSTERID:
//  473       // "the" message
//  474 #if defined( LCD_SUPPORTED )
//  475       HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#`?<Constant "rcvd">` & 0xff
        MOV     R5,#(`?<Constant "rcvd">` >> 8) & 0xff
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??HalLcdWriteScreen?relay
//  476 #elif defined( WIN32 )
//  477       WPRINTSTR( pkt->cmd.Data );
//  478 #endif
//  479       break;
//  480   }
//  481 }
??TestAPP_MessageMSGCB_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  482 
//  483 /*********************************************************************
//  484  * @fn      TestAPP_SendTheMessage
//  485  *
//  486  * @brief   Send "the" message.
//  487  *
//  488  * @param   none
//  489  *
//  490  * @return  none
//  491  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 void TestAPP_SendTheMessage( void )
TestAPP_SendTheMessage:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function TestAPP_SendTheMessage
        CODE
//  493 {
        FUNCALL TestAPP_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TestAPP_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  494   char theMessageData[] = "Hello World";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Hello World">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "Hello World">` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  495 
//  496   if ( AF_DataRequest( &TestAPP_DstAddr, &TestAPP_epDesc,
//  497                        TestAPP_CLUSTERID,
//  498                        (byte)osal_strlen( theMessageData ) + 1,
//  499                        (byte *)&theMessageData,
//  500                        &TestAPP_TransID,
//  501                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#TestAPP_TransID & 0xff
        MOV     ?V0 + 1,#(TestAPP_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#TestAPP_epDesc & 0xff
        MOV     R5,#(TestAPP_epDesc >> 8) & 0xff
        MOV     R2,#TestAPP_DstAddr & 0xff
        MOV     R3,#(TestAPP_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  502   {
//  503     // Successfully requested to be sent.
//  504   }
//  505   else
//  506   {
//  507     // Error occurred in request to send.
//  508   }
//  509 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock7

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TestAPP_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TestAPP_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TestAPP_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TestAPP_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TestAPP_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TestAPP_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TestAPP_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TestAPP_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TestAPP_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TestAPP_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TestAPP_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TestAPP_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TestAPP">`:
        DB "TestAPP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello ZigBee \\r\\n">`:
        DB "Hello ZigBee \015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "rcvd">`:
        DB "rcvd"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World">`:
        DB "Hello World"

        END
//  510 
//  511 /*********************************************************************
//  512 *********************************************************************/
// 
// 858 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   6 bytes in segment SFR_AN
//  55 bytes in segment XDATA_ROM_C
//  21 bytes in segment XDATA_Z
// 
// 894 bytes of CODE  memory
//  55 bytes of CONST memory
//   0 bytes of DATA  memory (+ 6 bytes shared)
//  21 bytes of XDATA memory
//
//Errors: none
//Warnings: none
