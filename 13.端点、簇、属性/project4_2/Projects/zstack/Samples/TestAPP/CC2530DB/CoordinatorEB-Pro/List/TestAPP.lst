###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Nov/2023  22:31:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          Source\TestAPP.c                                   #
#    Command line       =  -f C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ #
#                          ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Samples\TestA #
#                          PP\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg     #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          Source\TestAPP.c -D ZIGBEEPRO -D ZTOOL_P1 -D       #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\yuan_hao\Desktop\ #
#                          ´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects #
#                          \zstack\Samples\TestAPP\CC2530DB\CoordinatorEB-Pro #
#                          \List\ -lA C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\Îï #
#                          ÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sampl #
#                          es\TestAPP\CC2530DB\CoordinatorEB-Pro\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          CC2530DB\CoordinatorEB-Pro\Obj\ -e --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\yuan_hao\Desktop\ #
#                          ´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects #
#                          \zstack\Samples\TestAPP\CC2530DB\ -I               #
#                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          CC2530DB\..\SOURCE\ -I C:\Users\yuan_hao\Desktop\´ #
#                          óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\ #
#                          zstack\Samples\TestAPP\CC2530DB\..\..\..\ZMAIN\TI2 #
#                          530DB\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁ #
#                          ªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sample #
#                          s\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MT\   #
#                          -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ #
#                          ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Samples\TestA #
#                          PP\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ #
#                           -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨Ð #
#                          Å¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Samples\Test #
#                          APP\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\ #
#                          CC2530EB\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ #
#                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sam #
#                          ples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\OS #
#                          AL\MCU\CCSOC\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿ #
#                          Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack #
#                          \Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\OSAL\INCLUDE\ -I C:\Users\yuan_hao\Desktop\´óÈýÉ #
#                          Ï¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zsta #
#                          ck\Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\AF\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿ #
#                          Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack #
#                          \Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\STACK\NWK\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î #
#                          ³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\ #
#                          Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS #
#                          \STACK\SEC\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³ #
#                          Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\S #
#                          amples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SAPI\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³ #
#                          Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\S #
#                          amples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SYS\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì #
#                          \ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sa #
#                          mples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\ZDO\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ #
#                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sam #
#                          ples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ZM #
#                          AC\F8W\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\Îï #
#                          ÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sampl #
#                          es\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC #
#                          \ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ #
#                          ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Samples\Tes #
#                          tAPP\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\S #
#                          ADDR\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁª #
#                          ÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Samples #
#                          \TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SDATA\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ #
#                          ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sam #
#                          ples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\MA #
#                          C\INCLUDE\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì #
#                          \ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Sa #
#                          mples\TestAPP\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\HIGH_LEVEL\ -I C:\Users\yuan_hao\Desktop\´óÈýÉÏ #
#                          ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstac #
#                          k\Samples\TestAPP\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\LOW_LEVEL\srf04\ -I                         #
#                          C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\s #
#                          rf04\SINGLE_CHIP\ -Ohz                             #
#    List file          =  C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          CC2530DB\CoordinatorEB-Pro\List\TestAPP.lst        #
#    Object file        =  C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Ê #
#                          õ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\ #
#                          CC2530DB\CoordinatorEB-Pro\Obj\TestAPP.r51         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\yuan_hao\Desktop\´óÈýÉÏ¿Î³Ì\ÎïÁªÍøÍ¨ÐÅ¼¼Êõ\ÊµÑé\project4_2\Projects\zstack\Samples\TestAPP\Source\TestAPP.c
      1          /**************************************************************************************************
      2            Filename:       TestAPP.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 15 seconds.  The application will also
     46            receive "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "TestAPP.h"
     70          #include "DebugTrace.h"
     71          
     72          #if !defined( WIN32 )
     73            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_uart.h"
     81          #include "UART.h"
     82          #include"74LS164_8LED.h"
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          
     87          /*********************************************************************
     88           * CONSTANTS
     89           */
     90          
     91          /*********************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /*********************************************************************
     96           * GLOBAL VARIABLES
     97           */
     98          
     99          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    100          const cId_t TestAPP_ClusterList[TestAPP_MAX_CLUSTERS] =
   \                     TestAPP_ClusterList:
   \   000000   0100         DW 1
    101          {
    102            TestAPP_CLUSTERID
    103          };
    104          

   \                                 In  segment XDATA_ROM_C, align 1
    105          const SimpleDescriptionFormat_t TestAPP_SimpleDesc =
   \                     TestAPP_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW TestAPP_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW TestAPP_ClusterList
    106          {
    107            TestAPP_ENDPOINT,              //  int Endpoint;
    108            TestAPP_PROFID,                //  uint16 AppProfId[2];
    109            TestAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    110            TestAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    111            TestAPP_FLAGS,                 //  int   AppFlags:4;
    112            TestAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    113            (cId_t *)TestAPP_ClusterList,  //  byte *pAppInClusterList;
    114            TestAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    115            (cId_t *)TestAPP_ClusterList   //  byte *pAppInClusterList;
    116          };
    117          
    118          // This is the Endpoint/Interface description.  It is defined here, but
    119          // filled-in in TestAPP_Init().  Another way to go would be to fill
    120          // in the structure here and make it a "const" (in code space).  The
    121          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          endPointDesc_t TestAPP_epDesc;
   \                     TestAPP_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          endPointDesc_t TestAPP_epDesc_8;
   \                     TestAPP_epDesc_8:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * EXTERNAL VARIABLES
    127           */
    128          
    129          /*********************************************************************
    130           * EXTERNAL FUNCTIONS
    131           */
    132          
    133          /*********************************************************************
    134           * LOCAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          byte TestAPP_TaskID;   // Task ID for internal task/event processing
   \                     TestAPP_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137                                    // This variable will be received when
    138                                    // TestAPP_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          devStates_t TestAPP_NwkState;
   \                     TestAPP_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          byte TestAPP_TransID;  // This is the unique message ID (counter)
   \                     TestAPP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t TestAPP_DstAddr;
   \                     TestAPP_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          
    146          /*********************************************************************
    147           * LOCAL FUNCTIONS
    148           */
    149          void TestAPP_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    150          void TestAPP_HandleKeys( byte shift, byte keys );
    151          void TestAPP_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    152          void TestAPP_SendTheMessage( void );
    153          
    154          /*********************************************************************
    155           * NETWORK LAYER CALLBACKS
    156           */
    157          
    158          /*********************************************************************
    159           * PUBLIC FUNCTIONS
    160           */
    161          
    162          /*********************************************************************
    163           * @fn      TestAPP_Init
    164           *
    165           * @brief   Initialization function for the Generic App Task.
    166           *          This is called during initialization and should contain
    167           *          any application specific initialization (ie. hardware
    168           *          initialization/setup, table initialization, power up
    169           *          notificaiton ... ).
    170           *
    171           * @param   task_id - the ID assigned by OSAL.  This ID should be
    172           *                    used to send messages and set timers.
    173           *
    174           * @return  none
    175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void TestAPP_Init( byte task_id )
   \                     TestAPP_Init:
    177          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    178            TestAPP_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#TestAPP_TaskID
   \   000009   F0           MOVX    @DPTR,A
    179            TestAPP_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#TestAPP_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    180            TestAPP_TransID = 0;
   \   000010   90....       MOV     DPTR,#TestAPP_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    181          
    182            // Device hardware initialization can be added here or in main() (Zmain.c).
    183            // If the hardware is application specific - add it here.
    184            // If the hardware is other parts of the device add it in main().
    185          
    186            TestAPP_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000015   90....       MOV     DPTR,#TestAPP_DstAddr + 8
   \   000018   F0           MOVX    @DPTR,A
    187            TestAPP_DstAddr.endPoint = 0;
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    188            TestAPP_DstAddr.addr.shortAddr = 0;
   \   00001B   90....       MOV     DPTR,#TestAPP_DstAddr
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    189          
    190            // Fill out the endpoint description.
    191            
    192            //¶Ëµã7
    193            TestAPP_epDesc.endPoint = 7; //TestAPP_ENDPOINT;
   \   000021   90....       MOV     DPTR,#TestAPP_epDesc
   \   000024   7407         MOV     A,#0x7
   \   000026   12....       LCALL   ?Subroutine3 & 0xFFFF
    194            TestAPP_epDesc.task_id = &TestAPP_TaskID;
    195            TestAPP_epDesc.simpleDesc
    196                      = (SimpleDescriptionFormat_t *)&TestAPP_SimpleDesc;
   \                     ??CrossCallReturnLabel_3:
   \   000029   7E..         MOV     R6,#TestAPP_SimpleDesc & 0xff
   \   00002B   7F..         MOV     R7,#(TestAPP_SimpleDesc >> 8) & 0xff
   \   00002D   A3           INC     DPTR
   \   00002E   EE           MOV     A,R6
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   EF           MOV     A,R7
   \   000032   F0           MOVX    @DPTR,A
    197            TestAPP_epDesc.latencyReq = noLatencyReqs;
   \   000033   A3           INC     DPTR
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
    198            
    199            // Register the endpoint description with the AF
    200            afRegister( &TestAPP_epDesc );
   \   000036                ; Setup parameters for call to function afRegister
   \   000036   7A..         MOV     R2,#TestAPP_epDesc & 0xff
   \   000038   7B..         MOV     R3,#(TestAPP_epDesc >> 8) & 0xff
   \   00003A   12....       LCALL   ??afRegister?relay
    201            
    202            //¶Ëµã8
    203            TestAPP_epDesc_8.endPoint = 8; //TestAPP_ENDPOINT;
   \   00003D   90....       MOV     DPTR,#TestAPP_epDesc_8
   \   000040   7408         MOV     A,#0x8
   \   000042   12....       LCALL   ?Subroutine3 & 0xFFFF
    204            TestAPP_epDesc_8.task_id = &TestAPP_TaskID;
    205            TestAPP_epDesc_8.simpleDesc
    206                      = (SimpleDescriptionFormat_t *)&TestAPP_SimpleDesc;
   \                     ??CrossCallReturnLabel_4:
   \   000045   A3           INC     DPTR
   \   000046   EE           MOV     A,R6
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   EF           MOV     A,R7
   \   00004A   F0           MOVX    @DPTR,A
    207            TestAPP_epDesc_8.latencyReq = noLatencyReqs; 
   \   00004B   A3           INC     DPTR
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
    208            
    209            // Register the endpoint description with the AF
    210            afRegister( &TestAPP_epDesc_8 );
   \   00004E                ; Setup parameters for call to function afRegister
   \   00004E   7A..         MOV     R2,#TestAPP_epDesc_8 & 0xff
   \   000050   7B..         MOV     R3,#(TestAPP_epDesc_8 >> 8) & 0xff
   \   000052   12....       LCALL   ??afRegister?relay
    211          
    212            
    213            
    214            
    215            
    216            // Register for all key events - This app will handle all key events
    217            RegisterForKeys( TestAPP_TaskID );
   \   000055                ; Setup parameters for call to function RegisterForKeys
   \   000055   90....       MOV     DPTR,#TestAPP_TaskID
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   ??RegisterForKeys?relay
    218          
    219            // Update the display
    220          #if defined ( LCD_SUPPORTED )
    221              HalLcdWriteString( "TestAPP", HAL_LCD_LINE_1 );
   \   00005D                ; Setup parameters for call to function HalLcdWriteString
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   7A..         MOV     R2,#`?<Constant "TestAPP">` & 0xff
   \   000061   7B..         MOV     R3,#(`?<Constant "TestAPP">` >> 8) & 0xff
   \   000063   12....       LCALL   ??HalLcdWriteString?relay
    222          #endif
    223              
    224            ZDO_RegisterForZDOMsg( TestAPP_TaskID, End_Device_Bind_rsp );
   \   000066                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000066   7A20         MOV     R2,#0x20
   \   000068   7B80         MOV     R3,#-0x80
   \   00006A   90....       MOV     DPTR,#TestAPP_TaskID
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    225            ZDO_RegisterForZDOMsg( TestAPP_TaskID, Match_Desc_rsp );
   \   000072                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000072   7A06         MOV     R2,#0x6
   \   000074   7B80         MOV     R3,#-0x80
   \   000076   90....       MOV     DPTR,#TestAPP_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    226          }
   \   00007E                REQUIRE ?Subroutine0
   \   00007E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74..         MOV     A,#TestAPP_TaskID & 0xff
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   74..         MOV     A,#(TestAPP_TaskID >> 8) & 0xff
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET
    227          
    228          /*********************************************************************
    229           * @fn      TestAPP_ProcessEvent
    230           *
    231           * @brief   Generic Application Task event processor.  This function
    232           *          is called to process all events for the task.  Events
    233           *          include timers, messages and any other user defined events.
    234           *
    235           * @param   task_id  - The OSAL assigned task ID.
    236           * @param   events - events to process.  This is a bit map and can
    237           *                   contain more than one event.
    238           *
    239           * @return  none
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          UINT16 TestAPP_ProcessEvent( byte task_id, UINT16 events )
   \                     TestAPP_ProcessEvent:
    242          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    243            afIncomingMSGPacket_t *MSGpkt;
    244            afDataConfirm_t *afDataConfirm;
    245          
    246            // Data Confirmation message fields
    247            byte sentEP;
    248            ZStatus_t sentStatus;
    249            byte sentTransID;       // This should match the value sent
    250            (void)task_id;  // Intentionally unreferenced parameter
    251          
    252            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   607D         JZ      ??TestAPP_ProcessEvent_0
    253            {
    254              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TestAPP_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8030         SJMP    ??TestAPP_ProcessEvent_1
    255              while ( MSGpkt )
    256              {
    257                switch ( MSGpkt->hdr.event )
    258                {
    259                  case ZDO_CB_MSG:
    260                    TestAPP_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    261                    break;
    262                    
    263                  case KEY_CHANGE:
    264                    TestAPP_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    265                    break;
    266          
    267                  case AF_DATA_CONFIRM_CMD:
    268                    // This message is received as a confirmation of a data packet sent.
    269                    // The status is of ZStatus_t type [defined in ZComDef.h]
    270                    // The message fields are defined in AF.h
    271                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    272                    sentEP = afDataConfirm->endpoint;
    273                    sentStatus = afDataConfirm->hdr.status;
    274                    sentTransID = afDataConfirm->transID;
    275                    (void)sentEP;
    276                    (void)sentTransID;
    277          
    278                    // Action taken when confirmation is received.
    279                    if ( sentStatus != ZSuccess )
    280                    {
    281                      // The data wasn't delivered -- Do something
    282                    }
    283                    break;
    284          
    285                  case AF_INCOMING_MSG_CMD:
    286                    TestAPP_MessageMSGCB( MSGpkt );
    287                    break;
    288          
    289                  case ZDO_STATE_CHANGE:
    290                    TestAPP_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??TestAPP_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#TestAPP_NwkState
   \   000015   F0           MOVX    @DPTR,A
    291                    
    292                    if (TestAPP_NwkState == DEV_ZB_COORD){
   \   000016   6409         XRL     A,#0x9
   \   000018   7005         JNZ     ??TestAPP_ProcessEvent_3
    293                        //Ð­µ÷Æ÷
    294                        LS164_BYTE(11);
   \   00001A                ; Setup parameters for call to function LS164_BYTE
   \   00001A   790B         MOV     R1,#0xb
   \   00001C   12....       LCALL   ??LS164_BYTE?relay
    295                    }
    296          
    297                    if (TestAPP_NwkState == DEV_ROUTER){
   \                     ??TestAPP_ProcessEvent_3:
   \   00001F   90....       MOV     DPTR,#TestAPP_NwkState
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6407         XRL     A,#0x7
   \   000025   7005         JNZ     ??TestAPP_ProcessEvent_4
    298                        //Â·ÓÉÆ÷
    299                        LS164_BYTE(12);
   \   000027                ; Setup parameters for call to function LS164_BYTE
   \   000027   790C         MOV     R1,#0xc
   \   000029   12....       LCALL   ??LS164_BYTE?relay
    300                    }
    301                        
    302                    if (TestAPP_NwkState == DEV_END_DEVICE){
   \                     ??TestAPP_ProcessEvent_4:
   \   00002C   90....       MOV     DPTR,#TestAPP_NwkState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6406         XRL     A,#0x6
   \   000032   7005         JNZ     ??TestAPP_ProcessEvent_5
    303                        //ÖÕ¶Ë
    304                        LS164_BYTE(13); 
   \   000034                ; Setup parameters for call to function LS164_BYTE
   \   000034   790D         MOV     R1,#0xd
   \                     ??TestAPP_ProcessEvent_6:
   \   000036   12....       LCALL   ??LS164_BYTE?relay
    305                    }   
    306                    break;
    307                  default:
    308                    break;
    309                }
    310          
    311                // Release the memory
    312                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??TestAPP_ProcessEvent_5:
   \   000039                ; Setup parameters for call to function osal_msg_deallocate
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   ??osal_msg_deallocate?relay
    313          
    314                // Next
    315                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( TestAPP_TaskID );
   \   000040                ; Setup parameters for call to function osal_msg_receive
   \                     ??TestAPP_ProcessEvent_1:
   \   000040   90....       MOV     DPTR,#TestAPP_TaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   ??osal_msg_receive?relay
   \   000048   8A..         MOV     ?V0 + 2,R2
   \   00004A   8B..         MOV     ?V0 + 3,R3
   \   00004C   AE..         MOV     R6,?V0 + 2
   \   00004E   AF..         MOV     R7,?V0 + 3
   \   000050   EE           MOV     A,R6
   \   000051   4F           ORL     A,R7
   \   000052   602E         JZ      ??TestAPP_ProcessEvent_7
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24E6         ADD     A,#-0x1a
   \   00005B   601C         JZ      ??TestAPP_ProcessEvent_8
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   6011         JZ      ??TestAPP_ProcessEvent_9
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AB         JZ      ??TestAPP_ProcessEvent_2
   \   000065   24FE         ADD     A,#-0x2
   \   000067   70D0         JNZ     ??TestAPP_ProcessEvent_5
   \   000069                ; Setup parameters for call to function TestAPP_ProcessZDOMsgs
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   ??TestAPP_ProcessZDOMsgs?relay
   \   000070   80C7         SJMP    ??TestAPP_ProcessEvent_5
   \                     ??TestAPP_ProcessEvent_9:
   \   000072                ; Setup parameters for call to function LS164_BYTE
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   80BD         SJMP    ??TestAPP_ProcessEvent_6
   \                     ??TestAPP_ProcessEvent_8:
   \   000079                ; Setup parameters for call to function TestAPP_MessageMSGCB
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   12....       LCALL   ??TestAPP_MessageMSGCB?relay
   \   000080   80B7         SJMP    ??TestAPP_ProcessEvent_5
    316              }
    317          
    318              // return unprocessed events
    319              return (events ^ SYS_EVENT_MSG);
   \                     ??TestAPP_ProcessEvent_7:
   \   000082   AA..         MOV     R2,?V0 + 0
   \   000084   E5..         MOV     A,?V0 + 1
   \   000086   6480         XRL     A,#0x80
   \   000088   FB           MOV     R3,A
   \   000089   803E         SJMP    ??TestAPP_ProcessEvent_10
    320            }
    321          
    322            // Send a message out - This event is generated by a timer
    323            //  (setup in TestAPP_Init()).
    324            if ( events & TestAPP_SEND_MSG_EVT ){
   \                     ??TestAPP_ProcessEvent_0:
   \   00008B   EA           MOV     A,R2
   \   00008C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008E   500A         JNC     ??TestAPP_ProcessEvent_11
    325                
    326              P0DIR |= 0X02;
   \   000090   43FD02       ORL     0xfd,#0x2
    327              P0_1 = 0;
   \   000093   C281         CLR     0x80.1
    328                
    329              // return unprocessed events
    330              return (events ^ TestAPP_SEND_MSG_EVT);
   \   000095   6401         XRL     A,#0x1
   \   000097   FA           MOV     R2,A
   \   000098   802F         SJMP    ??TestAPP_ProcessEvent_10
    331            }
    332            
    333            
    334            if ( events & TestAPP_EVT ){
   \                     ??TestAPP_ProcessEvent_11:
   \   00009A   5402         ANL     A,#0x2
   \   00009C   6027         JZ      ??TestAPP_ProcessEvent_12
    335               
    336               P0SEL &=0XEF;//1110 1111 
   \   00009E   12....       LCALL   ?Subroutine4 & 0xFFFF
    337               P0DIR |= 0X10;
    338               P0_4 ^= 1;
    339               
    340               if(0==P1_1){/*°´Å¥3°´ÏÂ*/LS164_BYTE(3);}
   \                     ??CrossCallReturnLabel_5:
   \   0000A1   A291         MOV     C,0x90.1
   \   0000A3   4005         JC      ??TestAPP_ProcessEvent_13
   \   0000A5                ; Setup parameters for call to function LS164_BYTE
   \   0000A5   7903         MOV     R1,#0x3
   \   0000A7   12....       LCALL   ??LS164_BYTE?relay
    341               if(0==P2_0){/*°´Å¥4°´ÏÂ*/LS164_BYTE(4);}
   \                     ??TestAPP_ProcessEvent_13:
   \   0000AA   A2A0         MOV     C,0xa0.0
   \   0000AC   4005         JC      ??TestAPP_ProcessEvent_14
   \   0000AE                ; Setup parameters for call to function LS164_BYTE
   \   0000AE   7904         MOV     R1,#0x4
   \   0000B0   12....       LCALL   ??LS164_BYTE?relay
    342               if(0==P0_5){/*°´Å¥5°´ÏÂ*/LS164_BYTE(5);}
   \                     ??TestAPP_ProcessEvent_14:
   \   0000B3   A285         MOV     C,0x80.5
   \   0000B5   4005         JC      ??TestAPP_ProcessEvent_15
   \   0000B7                ; Setup parameters for call to function LS164_BYTE
   \   0000B7   7905         MOV     R1,#0x5
   \   0000B9   12....       LCALL   ??LS164_BYTE?relay
    343                
    344               return (events ^ TestAPP_EVT);
   \                     ??TestAPP_ProcessEvent_15:
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   6402         XRL     A,#0x2
   \   0000C0   FA           MOV     R2,A
   \   0000C1   AB..         MOV     R3,?V0 + 1
   \   0000C3   8004         SJMP    ??TestAPP_ProcessEvent_10
    345            }
    346          
    347            // Discard unknown events
    348            return 0;
   \                     ??TestAPP_ProcessEvent_12:
   \   0000C5   7A00         MOV     R2,#0x0
   \   0000C7   7B00         MOV     R3,#0x0
   \                     ??TestAPP_ProcessEvent_10:
   \   0000C9   7F04         MOV     R7,#0x4
   \   0000CB   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000CE                REQUIRE P0DIR
   \   0000CE                REQUIRE _A_P0
   \   0000CE                REQUIRE P0SEL
   \   0000CE                REQUIRE _A_P1
   \   0000CE                REQUIRE _A_P2
    349          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   53F3EF       ANL     0xf3,#0xef
   \   000003   43FD10       ORL     0xfd,#0x10
   \   000006   638010       XRL     0x80,#0x10
   \   000009   22           RET
    350          
    351          /*********************************************************************
    352           * Event Generation Functions
    353           */
    354          
    355          /*********************************************************************
    356           * @fn      TestAPP_ProcessZDOMsgs()
    357           *
    358           * @brief   Process response messages
    359           *
    360           * @param   none
    361           *
    362           * @return  none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          void TestAPP_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     TestAPP_ProcessZDOMsgs:
    365          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    366            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 1,A
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for TestAPP_ProcessZDOMsgs>_0`:
   \   00001B   0000         DW        0
   \   00001D   0200         DW        2
   \   00001F   0680         DW        32774
   \   000021   ....         DW        ??TestAPP_ProcessZDOMsgs_0
   \   000023   2080         DW        32800
   \   000025   ....         DW        ??TestAPP_ProcessZDOMsgs_1
   \   000027   ....         DW        ??TestAPP_ProcessZDOMsgs_2
    367            {
    368              case End_Device_Bind_rsp:
    369                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??TestAPP_ProcessZDOMsgs_1:
   \   000029   EA           MOV     A,R2
   \   00002A   2413         ADD     A,#0x13
   \   00002C   F582         MOV     DPL,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000036   7009         JNZ     ??TestAPP_ProcessZDOMsgs_3
    370                {
    371                  // Light LED
    372                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000038                ; Setup parameters for call to function HalLedSet
   \   000038   7A01         MOV     R2,#0x1
   \                     ??TestAPP_ProcessZDOMsgs_4:
   \   00003A   7908         MOV     R1,#0x8
   \   00003C   12....       LCALL   ??HalLedSet?relay
   \   00003F   8053         SJMP    ??TestAPP_ProcessZDOMsgs_2
    373                }
    374          #if defined(BLINK_LEDS)
    375                else
    376                {
    377                  // Flash LED to show failure
    378                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??TestAPP_ProcessZDOMsgs_3:
   \   000041                ; Setup parameters for call to function HalLedSet
   \   000041   7A04         MOV     R2,#0x4
   \   000043   80F5         SJMP    ??TestAPP_ProcessZDOMsgs_4
    379                }
    380          #endif
    381                break;
    382          
    383              case Match_Desc_rsp:
    384                {
    385                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??TestAPP_ProcessZDOMsgs_0:
   \   000045                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000045   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   000048   8A..         MOV     ?V0 + 0,R2
   \   00004A   8B..         MOV     ?V0 + 1,R3
   \   00004C   AE..         MOV     R6,?V0 + 0
   \   00004E   AF..         MOV     R7,?V0 + 1
    386                  if ( pRsp )
   \   000050   EE           MOV     A,R6
   \   000051   4F           ORL     A,R7
   \   000052   6040         JZ      ??TestAPP_ProcessZDOMsgs_2
    387                  {
    388                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7032         JNZ     ??TestAPP_ProcessZDOMsgs_5
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   602C         JZ      ??TestAPP_ProcessZDOMsgs_5
    389                    {
    390                      TestAPP_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000061   90....       MOV     DPTR,#TestAPP_DstAddr + 8
   \   000064   7402         MOV     A,#0x2
   \   000066   F0           MOVX    @DPTR,A
    391                      TestAPP_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   90....       MOV     DPTR,#TestAPP_DstAddr
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E9           MOV     A,R1
   \   000078   F0           MOVX    @DPTR,A
    392                      // Take the first endpoint, Can be changed to search through endpoints
    393                      TestAPP_DstAddr.endPoint = pRsp->epList[0];
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   90....       MOV     DPTR,#TestAPP_DstAddr + 9
   \   000085   F0           MOVX    @DPTR,A
    394          
    395                      // Light LED
    396                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000086                ; Setup parameters for call to function HalLedSet
   \   000086   7A01         MOV     R2,#0x1
   \   000088   7908         MOV     R1,#0x8
   \   00008A   12....       LCALL   ??HalLedSet?relay
    397                    }
    398                    osal_mem_free( pRsp );
   \                     ??TestAPP_ProcessZDOMsgs_5:
   \   00008D                ; Setup parameters for call to function osal_mem_free
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   FB           MOV     R3,A
   \   000091   12....       LCALL   ??osal_mem_free?relay
    399                  }
    400                }
    401                break;
    402            }
    403          }
   \                     ??TestAPP_ProcessZDOMsgs_2:
   \   000094                REQUIRE ?Subroutine1
   \   000094                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET
    404          
    405          /*********************************************************************
    406           * @fn      TestAPP_HandleKeys
    407           *
    408           * @brief   Handles all key events for this device.
    409           *
    410           * @param   shift - true if in shift/alt.
    411           * @param   keys - bit field for key events. Valid entries:
    412           *                 HAL_KEY_SW_4
    413           *                 HAL_KEY_SW_3
    414           *                 HAL_KEY_SW_2
    415           *                 HAL_KEY_SW_1
    416           *
    417           * @return  none
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          void TestAPP_HandleKeys( byte shift, byte keys )
   \                     TestAPP_HandleKeys:
    420          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    421             LS164_BYTE(keys);
   \   000006                ; Setup parameters for call to function LS164_BYTE
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??LS164_BYTE?relay
    422          }
   \   00000A   02....       LJMP    ?Subroutine0 & 0xFFFF
    423          
    424          /*********************************************************************
    425           * LOCAL FUNCTIONS
    426           */
    427          
    428          /*********************************************************************
    429           * @fn      TestAPP_MessageMSGCB
    430           *
    431           * @brief   Data message processor callback.  This function processes
    432           *          any incoming data - probably from other devices.  So, based
    433           *          on cluster ID, perform the intended action.
    434           *
    435           * @param   none
    436           *
    437           * @return  none
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          void TestAPP_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     TestAPP_MessageMSGCB:
    440          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    441             // ¶Ëµã7
    442             if(7 == pkt->endPoint){
   \   000005   EA           MOV     A,R2
   \   000006   2421         ADD     A,#0x21
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   FE           MOV     R6,A
   \   00000F   E9           MOV     A,R1
   \   000010   FF           MOV     R7,A
   \   000011   EA           MOV     A,R2
   \   000012   2404         ADD     A,#0x4
   \   000014   F8           MOV     R0,A
   \   000015   EB           MOV     A,R3
   \   000016   3400         ADDC    A,#0x0
   \   000018   F9           MOV     R1,A
   \   000019   88..         MOV     ?V0 + 0,R0
   \   00001B   89..         MOV     ?V0 + 1,R1
   \   00001D   EA           MOV     A,R2
   \   00001E   2414         ADD     A,#0x14
   \   000020   F8           MOV     R0,A
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \   000025   88..         MOV     ?V0 + 2,R0
   \   000027   89..         MOV     ?V0 + 3,R1
   \   000029   8882         MOV     DPL,R0
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6407         XRL     A,#0x7
   \   000030   7035         JNZ     ??TestAPP_MessageMSGCB_0
    443                switch(pkt->clusterId){// ÅÐ¶ÏÊÇÄÄ¸ö´Ø
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 5,A
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for TestAPP_MessageMSGCB>_0`:
   \   000044   0100         DW        1
   \   000046   01           DB        1
   \   000047   ....         DW        ??TestAPP_MessageMSGCB_0
   \   000049   ....         DW        ??TestAPP_MessageMSGCB_1
   \   00004B   ....         DW        ??TestAPP_MessageMSGCB_2
    444                   case 0x0001:
    445                      LS164_BYTE(pkt->cmd.Data[0]);
   \                     ??TestAPP_MessageMSGCB_1:
   \   00004D                ; Setup parameters for call to function LS164_BYTE
   \   00004D   12....       LCALL   ?Subroutine2 & 0xFFFF
    446                      P1SEL &=0XFE;//1111 1110  LED1
   \                     ??CrossCallReturnLabel_0:
   \   000050   53F4FE       ANL     0xf4,#0xfe
    447                      P1DIR |=0X01;//
   \   000053   43FE01       ORL     0xfe,#0x1
    448                      P1_0 ^=1;
   \   000056   639001       XRL     0x90,#0x1
    449                      break;
   \   000059   800C         SJMP    ??TestAPP_MessageMSGCB_0
    450                     
    451                   case 0x0002:
    452                      LS164_BYTE(pkt->cmd.Data[0]);
   \                     ??TestAPP_MessageMSGCB_2:
   \   00005B                ; Setup parameters for call to function LS164_BYTE
   \   00005B   12....       LCALL   ?Subroutine2 & 0xFFFF
    453                      P0SEL &=0XFD;// 1111 1101;
   \                     ??CrossCallReturnLabel_1:
   \   00005E   53F3FD       ANL     0xf3,#0xfd
    454                      P0DIR |=0X02;
   \   000061   43FD02       ORL     0xfd,#0x2
    455                      P0_1 ^=1;
   \   000064   638002       XRL     0x80,#0x2
    456                      break;
    457                }
    458             }
    459             
    460             // ¶Ëµã8
    461             if(8 == pkt->endPoint){
   \                     ??TestAPP_MessageMSGCB_0:
   \   000067   85..82       MOV     DPL,?V0 + 2
   \   00006A   85..83       MOV     DPH,?V0 + 3
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   6408         XRL     A,#0x8
   \   000070   7015         JNZ     ??CrossCallReturnLabel_6
    462                switch(pkt->clusterId){
   \   000072   85..82       MOV     DPL,?V0 + 0
   \   000075   85..83       MOV     DPH,?V0 + 1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   6401         XRL     A,#0x1
   \   00007B   7002         JNZ     ??TestAPP_MessageMSGCB_3
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \                     ??TestAPP_MessageMSGCB_3:
   \   00007F   7006         JNZ     ??CrossCallReturnLabel_6
    463                   case 0x0001:
    464                      LS164_BYTE(pkt->cmd.Data[0]);
   \   000081                ; Setup parameters for call to function LS164_BYTE
   \   000081   12....       LCALL   ?Subroutine2 & 0xFFFF
    465                      P0SEL &=0XEF;// 1110 1111 LED3
   \                     ??CrossCallReturnLabel_2:
   \   000084   12....       LCALL   ?Subroutine4 & 0xFFFF
    466                      P0DIR |=0X10;
    467                      P0_4 ^=1;
    468                      break;
    469                }
    470             }
    471          }
   \                     ??CrossCallReturnLabel_6:
   \   000087   7F06         MOV     R7,#0x6
   \   000089   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00008C                REQUIRE P1SEL
   \   00008C                REQUIRE P1DIR
   \   00008C                REQUIRE _A_P1
   \   00008C                REQUIRE P0SEL
   \   00008C                REQUIRE P0DIR
   \   00008C                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000007   F9           MOV     R1,A
   \   000008   12....       LCALL   ??LS164_BYTE?relay
   \   00000B   22           RET
    472          
    473          /*********************************************************************
    474           * @fn      TestAPP_SendTheMessage
    475           *
    476           * @brief   Send "the" message.
    477           *
    478           * @param   none
    479           *
    480           * @return  none
    481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          void TestAPP_SendTheMessage( void )
   \                     TestAPP_SendTheMessage:
    483          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    484            char theMessageData[] = "Hello World";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "Hello World">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "Hello World">` & 0xff
   \   00001A   740C         MOV     A,#0xc
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    485          
    486            if ( AF_DataRequest( &TestAPP_DstAddr, &TestAPP_epDesc,
    487                                 TestAPP_CLUSTERID,
    488                                 (byte)osal_strlen( theMessageData ) + 1,
    489                                 (byte *)&theMessageData,
    490                                 &TestAPP_TransID,
    491                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#TestAPP_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(TestAPP_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042                ; Setup parameters for call to function osal_strlen
   \   000042   7405         MOV     A,#0x5
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   12....       LCALL   ??osal_strlen?relay
   \   00004E   EA           MOV     A,R2
   \   00004F   2401         ADD     A,#0x1
   \   000051   F5..         MOV     ?V0 + 0,A
   \   000053   E4           CLR     A
   \   000054   3400         ADDC    A,#0x0
   \   000056   F5..         MOV     ?V0 + 1,A
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..01       MOV     ?V0 + 0,#0x1
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7920         MOV     R1,#0x20
   \   00006A   7C..         MOV     R4,#TestAPP_epDesc & 0xff
   \   00006C   7D..         MOV     R5,#(TestAPP_epDesc >> 8) & 0xff
   \   00006E   7A..         MOV     R2,#TestAPP_DstAddr & 0xff
   \   000070   7B..         MOV     R3,#(TestAPP_DstAddr >> 8) & 0xff
   \   000072   12....       LCALL   ??AF_DataRequest?relay
   \   000075   7409         MOV     A,#0x9
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
    492            {
    493              // Successfully requested to be sent.
    494            }
    495            else
    496            {
    497              // Error occurred in request to send.
    498            }
    499          }
   \   00007A   740C         MOV     A,#0xc
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TestAPP_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestAPP_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TestAPP_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestAPP_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TestAPP_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestAPP_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TestAPP_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestAPP_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TestAPP_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestAPP_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??TestAPP_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestAPP_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TestAPP">`:
   \   000000   54657374     DB "TestAPP"
   \            41505000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World">`:
   \   000000   48656C6C     DB "Hello World"
   \            6F20576F
   \            726C6400
    500          
    501          /*********************************************************************
    502          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     TestAPP_HandleKeys              0      0      9
       -> LS164_BYTE                 0      0     18
     TestAPP_Init                    0      0      9
       -> afRegister                 0      0     18
       -> afRegister                 0      0     18
       -> RegisterForKeys            0      0     18
       -> HalLcdWriteString          0      0     18
       -> ZDO_RegisterForZDOMsg      0      0     18
       -> ZDO_RegisterForZDOMsg      0      0     18
     TestAPP_MessageMSGCB            0      0     26
       -> LS164_BYTE                 0      0     28
       -> LS164_BYTE                 0      0     28
       -> LS164_BYTE                 0      0     28
     TestAPP_ProcessEvent            0      0     12
       -> osal_msg_receive           0      0     24
       -> LS164_BYTE                 0      0     24
       -> LS164_BYTE                 0      0     24
       -> LS164_BYTE                 0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> TestAPP_ProcessZDOMsgs     0      0     24
       -> LS164_BYTE                 0      0     24
       -> TestAPP_MessageMSGCB       0      0     24
       -> LS164_BYTE                 0      0     24
       -> LS164_BYTE                 0      0     24
       -> LS164_BYTE                 0      0     24
     TestAPP_ProcessZDOMsgs          0      0     22
       -> HalLedSet                  0      0     20
       -> HalLedSet                  0      0     20
       -> ZDO_ParseEPListRsp         0      0     20
       -> HalLedSet                  0      0     20
       -> osal_mem_free              0      0     20
     TestAPP_SendTheMessage          2      0     31
       -> osal_strlen                0      0     54
       -> AF_DataRequest             0      0     62


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_P0                             1
     _A_P1                             1
     _A_P2                             1
     P0SEL                             1
     P1SEL                             1
     P0DIR                             1
     P1DIR                             1
     TestAPP_ClusterList               2
     TestAPP_SimpleDesc               12
     TestAPP_epDesc                    6
     TestAPP_epDesc_8                  6
     TestAPP_TaskID                    1
     TestAPP_NwkState                  1
     TestAPP_TransID                   1
     TestAPP_DstAddr                  12
     TestAPP_Init                    126
     ?Subroutine0                      5
     ?Subroutine3                     10
     TestAPP_ProcessEvent            206
     ?Subroutine4                     10
     TestAPP_ProcessZDOMsgs          148
     ?Subroutine1                      5
     ?Subroutine5                     10
     TestAPP_HandleKeys               13
     TestAPP_MessageMSGCB            140
     ?Subroutine2                     12
     TestAPP_SendTheMessage          130
     ??TestAPP_Init?relay              6
     ??TestAPP_ProcessEvent?relay      6
     ??TestAPP_ProcessZDOMsgs?relay    6
     ??TestAPP_HandleKeys?relay        6
     ??TestAPP_MessageMSGCB?relay      6
     ??TestAPP_SendTheMessage?relay    6
     ?<Constant "TestAPP">             8
     ?<Constant "Hello World">        12

 
 815 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
  34 bytes in segment XDATA_ROM_C
  27 bytes in segment XDATA_Z
 
 851 bytes of CODE  memory
  34 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)
  27 bytes of XDATA memory

Errors: none
Warnings: none
